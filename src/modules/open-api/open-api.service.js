/* Automatically generated by './build/add-module.js' */
// httpUtils from insight-utils, httpUtils.get or httpUtils.post
import MegHttp from 'megvii-http';
import config from '@/utils/config.utils';

const baseUrl = config.apiPath.service; // 基础地址
const authUrl = config.apiPath.auth; // 基础地址

const urls = {
  list: `${baseUrl}/api/openapi/manage/user/list`, // 获取接口管理列表
  authList: `${baseUrl}/api/openapi/manage/auth/openapi/list`, // 授权接口列表
  dataPush: `${baseUrl}/api/openapi/manage/auth/queue/list`, // 数据推送列表
  levelAuth: `${baseUrl}/api/openapi/manage/auth/user/list`, // 获取用户级别授权（ip、流量）
  deviceList: `${baseUrl}/api/openapi/manage/auth/device/list`, // 设备列表
  albumList: `${baseUrl}/api/openapi/manage/auth/album/list`, // 底库列表
  getUserName: `${authUrl}/api/openapi/manage/user/baseUserInfo`,
  // albumList: `${authUrl}/api/auth/v5/permission`,
  setOpenapi: `${baseUrl}/api/openapi/manage/auth/user/grant`, // 用户级别授权(ip和流量)
  getVendor: `${baseUrl}/api/openapi/manage/vendor/list`,
  getUserToken: `${baseUrl}/api/openapi/manage/user/userToken/generate`, // 更新秘钥
  baseUserInfo: `${baseUrl}/api/openapi/manage/user/baseUserInfo`, // 创建用户模板
  addUser: `${baseUrl}/api/openapi/manage/user/adduser`, // 新增用户
  deleteUser: `${baseUrl}/api/openapi/manage/user/delete`, // 新增用户
  getUserInfo: `${baseUrl}/api/openapi/manage/user`, // 获取用户信息
  updateUser: `${baseUrl}/api/openapi/manage/user/updateuser`, // 获取用户信息
  updateGrant: `${baseUrl}/api/openapi/manage/auth/openapi/grant`, // 更新用户授权
  updatePush: `${baseUrl}/api/openapi/manage/auth/queue/grant`, // 更新数据推送
  itemvalue: `${baseUrl}/api/openapi/manage/sysconfig/itemvalue`, // 获取系统配置
  updateAuth: `${baseUrl}/api/openapi/manage/auth/resource/grant`, // 获取系统配置
  updateSettings: `${baseUrl}/api/openapi/manage/sysconfig/updateConfigs`
};

const OpenApiSrv = {
  list: (params = {}) => MegHttp.httpGet(`${urls.list}?pageNo=${params.pageNo}&pageSize=${params.pageSize}`),
  authList: (params = {}) => MegHttp.httpGet(`${urls.authList}/${params.id}`),
  getVendor: (params = {}) => MegHttp.httpGet(`${urls.getVendor}`, params),
  dataPush: (params = {}) => MegHttp.httpGet(`${urls.dataPush}/${params.id}`),
  levelAuth: (params = {}) => MegHttp.httpGet(`${urls.levelAuth}/${params.id}`),
  deviceList: (params = {}) => MegHttp.httpGet(`${urls.deviceList}/${params.id}`, { bizType: params.bizType }),
  albumList: (params = {}) => MegHttp.httpGet(`${urls.albumList}/${params.id}`, { bizType: params.bizType }),
  setOpenapi: (params = {}) => MegHttp.httpPost(`${urls.setOpenapi}`, params),
  getUserToken: (params = {}) => MegHttp.httpGet(`${urls.getUserToken}`, params),
  baseUserInfo: (params = {}) => MegHttp.httpGet(`${urls.baseUserInfo}`, params),
  addUser: (params = {}) => MegHttp.httpPost(`${urls.addUser}`, params),
  deleteUser: (params = {}) => MegHttp.httpPost(`${urls.deleteUser}/${params.id}`),
  getUserInfo: (params = {}) => MegHttp.httpGet(`${urls.getUserInfo}/${params.id}`),
  updateUser: (params = {}) => MegHttp.httpPost(`${urls.updateUser}`, params),
  itemvalue: (params = {}) => MegHttp.httpGet(`${urls.itemvalue}`, params, {
    transformParams: false
  }),
  updateGrant: (params = {}) => MegHttp.httpPost(`${urls.updateGrant}`, params),
  updatePush: (params = {}) => MegHttp.httpPost(`${urls.updatePush}`, params),
  updateAuth: (params = {}) => MegHttp.httpPost(`${urls.updateAuth}/${params.id}`, params.params, {
    transformParams: false
  }),
  updateSettings: (params = {}) => MegHttp.httpPost(`${urls.updateSettings}`, params),
};

export default OpenApiSrv;
